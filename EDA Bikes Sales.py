# -*- coding: utf-8 -*-
"""EDA  Bikes Sales

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vGL5f4OA_PJGBmkr3wMv-hmLZby3mNBL
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import files
plt.style.use("ggplot")

uploaded = files.upload()

df = pd.read_csv("Bike_Sales.csv")

df.head()

df.shape

df.columns

# Convert "Date" column to datetime format.
df["Date"] = pd.to_datetime(df["Date"])

# Looking for missing values.
df.isnull().sum()

# Creating copy and dropping unnecessary columns.
df_clean = df.copy()
df_clean = df_clean.drop(["Day", "Month", "Year"], axis=1)
df_clean.head()

# Subsetting (filtering) with a boolean mask to recognize missing values.
df_clean[df_clean.duplicated(subset=["Date","Customer_Age","Customer_Gender","Country","State","Product","Order_Quantity","Revenue"], keep = False)]

# Dropping duplicates.
df_clean = df_clean.drop_duplicates(subset=["Date","Customer_Age","Customer_Gender","Country","State","Product","Order_Quantity","Revenue"])
df_clean = df_clean.reset_index(drop=True)

# Generate summary statistics.
df_clean.describe()

# Adding Profit Margin Column.
df_clean["Profit_Margin"] = df_clean["Profit"] / df_clean["Revenue"] * 100

# Detecting Outliers.
fig, axes = plt.subplots(2, 2, figsize=(14, 10))

sns.boxplot(x="Revenue",
            data=df_clean,
            ax=axes[0,0],
            color="skyblue")
axes[0,0].set_xscale("log")
axes[0,0].set_title("Revenue (log scale)")


sns.boxplot(x="Order_Quantity",
            data=df_clean,
            ax=axes[0,1],
            color="lightgreen")
axes[0,1].set_title("Order Quantity")

sns.boxplot(x="Unit_Cost",
            data=df_clean,
            ax=axes[1,0],
            color="salmon")
axes[1,0].set_xscale("log")
axes[1,0].set_title("Unit Cost (log scale)")

sns.boxplot(x="Unit_Price",
            data=df_clean,
            ax=axes[1,1],
            color="orange")
axes[1,1].set_xscale("log")
axes[1,1].set_title("Unit Price (log scale)")

plt.tight_layout()
plt.show()

df_clean["Revenue"].sum()

df_clean["Profit"].sum()

df_clean["Profit_Margin"].mean()

df_clean["Order_Quantity"].mean()

df_clean.groupby("Country").agg({"Revenue": "sum",
                                 "Profit_Margin": "mean",
                                 "Profit": "mean"}).sort_values(by = "Revenue", ascending = False)

df_clean.groupby("Country")["Revenue"].sum().sort_values(ascending = False)

df_clean.groupby("Product_Category").agg({"Revenue" : "sum",
                                          "Order_Quantity" : "sum",
                                          "Profit_Margin" : "mean"}).sort_values(by= "Revenue", ascending = False)

percentage_of_salesbyagegroup = (df_clean.groupby("Age_Group")["Revenue"].sum() / df_clean["Revenue"].sum() * 100).sort_values( ascending = False)
percentage_of_salesbyagegroup

avg_order_value = (df_clean.groupby("Age_Group")["Revenue"].sum() / df_clean.groupby("Age_Group")["Order_Quantity"].sum()).sort_values(ascending = False)
avg_order_value

total_profitbyage = df_clean.groupby("Age_Group")["Profit"].sum()
profit_sharepercent = (total_profitbyage / total_profitbyage.sum()) * 100

customer_demographic_analysis = pd.DataFrame({"Percentage of Sales (100%)" : percentage_of_salesbyagegroup,
              "Profit (100%)" : profit_sharepercent,
              "Average Order Value" : avg_order_value,}).sort_values(by = "Percentage of Sales (100%)", ascending = False)

np.mean(df_clean["Profit_Margin"])

df_clean.groupby("Product").agg({"Revenue": "sum",
                                 "Profit": "sum",
                                 "Order_Quantity": "sum"}).nlargest(5, "Revenue").sort_values(by = "Profit", ascending = False)

# Plotting the proportion of records by country as a percentage bar chart.
prop = df_clean["Country"].value_counts(normalize = True)

plt.figure(figsize=(10, 7))
ax = sns.barplot(x=prop.index,
                 y=prop.values,
                 palette="viridis")

for bar, val in zip(ax.patches, prop.values):
    ax.text(bar.get_x() + bar.get_width()/2,
            bar.get_height() + 0.004,
            f"{val*100:.1f}%",
            ha='center')

plt.grid(True)
plt.xlabel("Country")
plt.ylabel("Proportion (%)")
ax.set_yticklabels([f"{i*100:.0f}%" for i in ax.get_yticks()])
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

# Plot stacked histograms of Order Quantity distribution across countries.
plt.figure(figsize = (10,8))

sns.histplot(data = df_clean,
             x = "Order_Quantity",
             bins = 15,
             kde = True,
             hue = "Country",
             multiple = "stack",
             palette = "viridis")

plt.tight_layout()
plt.xlabel("Order Quantity")
plt.title("Order Quantity Distribution")
plt.show()

# Plot the number of product records per country as a horizontal bar chart.
country_product_counts = df_clean.groupby("Country")["Product"].agg(["count"]).sort_values(by = "count", ascending = False)

plt.figure(figsize = (10,7))
sns.barplot(y = country_product_counts.index,
            x = country_product_counts["count"],
            palette= "viridis")

plt.xlabel("Count")
plt.ylabel("Country")
plt.title("Count By Country Products")
plt.show()

# Extracting year from the date column.
df_clean["Year"] = df_clean["Date"].dt.year

# Create a pivot table showing total revenue per country across different years.
pt = df_clean.pivot_table(
    values="Revenue",
    index="Country",
    columns="Year",
    aggfunc="sum",
    fill_value=0)

print(pt.head())

# Plot a stacked bar chart of revenue by country across different years.
pt.plot(kind="bar",
        stacked=True,
        figsize=(12,8),
        colormap="viridis")

plt.tight_layout()
plt.title("Revenue Distribution by Country Across Years")
plt.xlabel("Country")
plt.ylabel("Revenue")
plt.legend(title="Year",
           bbox_to_anchor=(1, 1.01),
           loc="upper left")
plt.show()

# Perform random sampling to reduce the rendering time.
df_sample = df_clean.sample(n = 5000, random_state = 0)
# The code below create a pairplot to visualize pairwise relationships among key numeric feature.
sns.pairplot(df_sample,
             vars = ["Customer_Age","Order_Quantity","Unit_Cost","Unit_Price",
                     "Profit", "Cost","Revenue","Profit_Margin","Year"],
             hue="Country",
             palette = "bright")
plt.show()

# Creating heatmap plot to indentify correlations between quantitative variables.
plt.figure(figsize = (10,7))
sns.heatmap(df_clean.select_dtypes(include = "number").corr(),
            annot = True,
            cmap = "coolwarm")
plt.show()

# The code below Creates a 2x2 grid of barplots to compare countries by:

fig, axes = plt.subplots(2,2, figsize = (14,10))
# (1) Total Revenue
sort_cr = df_clean.groupby("Country")["Revenue"].sum().sort_values(ascending= False).index
sns.barplot(x = "Country",
            y = "Revenue",
            data = df_clean,
            order = sort_cr,
            palette = "viridis",
            ax = axes[0,0],
            estimator = sum)
axes[0,0].set_title("Revenue by Country")

# (2) Total Profit
sort_cp = df_clean.groupby("Country")["Profit"].sum().sort_values(ascending= False).index
sns.barplot(x = "Country",
            y = "Profit",
            data = df_clean,
            order = sort_cp,
            palette = "crest",
            ax = axes[0,1],
            estimator = sum)
axes[0,1].set_title("Profit by Country")

# (3) Average Order Quantity
sort_coq = df_clean.groupby("Country")["Order_Quantity"].mean().sort_values(ascending= False).index
sns.barplot(x = "Country",
            y = "Order_Quantity",
            data = df_clean,
            order = sort_coq,
            palette = "magma",
            ax = axes[1,0])
axes[1,0].set_title("Order Quantity by Country")

# (4) Average Profit Margin
sort_cpm = df_clean.groupby("Country")["Profit_Margin"].mean().sort_values(ascending= False).index
sns.barplot(x = "Country",
            y = "Profit_Margin",
            data = df_clean,
            order = sort_cpm,
            palette = "mako",
            ax = axes[1,1])
axes[1,1].set_title("Profit Margin by Country")

plt.tight_layout()
plt.show()

# Setting "Date" as an index for Time series analysis
df_time = df_clean.set_index("Date")
df_time.head()

# Resampling revenue data by month for each country and plot monthly revenue insights.

m_revenue =df_time.groupby("Country")["Revenue"].resample("M").sum().reset_index()
plt.figure(figsize=(26,9))
sns.lineplot(x="Date",
             y="Revenue",
             hue="Country",
             data=m_revenue,
             marker="o",
             palette="magma")
plt.xlabel("Date")
plt.ylabel("Revenue")
plt.title("Monthly Revenue by Country")
plt.show()

"""
If we observe the line chart above, we can see that at the end of the year 2014, revenue reached zero.
To find out, we write the query below to uncover data where it's zero.
"""
df_clean.query("Revenue >= 0.0 and Revenue <= 10")

"""
Above, we can observe that there were 4564 rows with rather low revenue.
To affirm whether there were any errors in calculations or not, we use the following query below.
"""
df_clean.query("Profit == 0.0 and Revenue != Cost")

# Create a 2x2 grid of barplots to analyze revenue by different dimensions.

fig, axes= plt.subplots(2,2, figsize = (14,10))

# Top-left -> Revenue by Age Group and Country.
sns.barplot(x="Age_Group",
            y="Revenue",
            hue="Country",
            data=df_clean,
            estimator=sum,
            palette="dark:#5A9_r",
            ax = axes[0,0])
axes[0,0].set_title("Revenue by Age Group")

# Top-right -> Revenue distribution by Customer Gender.
sales_by_gender = df_clean.groupby('Customer_Gender')['Revenue'].sum()
sns.barplot(x=sales_by_gender.index,
            y=sales_by_gender.values,
            palette= "ch:s=.25,rot=-.25",
            ax = axes[0,1])
axes[0,1].set_title('Revenue Distribution by Customer Gender')

# Bottom-left -> Total Revenue by Product Category.
rev_prod = df_clean.groupby("Product_Category")["Revenue"].agg(["sum"]).sort_values(by = "sum" ,ascending = False)
sns.barplot(x = rev_prod.index,
            y = rev_prod["sum"],
            palette = "viridis",
            ax = axes[1,0])
axes[1,0].set_title("Revenue by Product Category")

# Bottom-right -> Top 3 Products by Revenue.
top10_products = df_clean.groupby("Product")["Revenue"].sum().nlargest(3)
sns.barplot(x = top10_products.index,
            y = top10_products.values,
            ax = axes[1,1],
            estimator = sum,
            palette="dark:#5A9_r")
axes[1,1].set_title("Product by Revenue")

plt.tight_layout()
plt.show()



